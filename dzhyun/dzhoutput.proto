syntax="proto3";
package dzhyun;

option java_package = "com.dzhyun.proto";

import "dzhyun.gupiaoqiepian.proto";
import "dzhyun.gupiaolianxu.proto";
import "dzhyun.zhubi.proto";

// 动态行情

message QuoteDyna
{
     int32 Time = 1;
     float LastClose = 2;
     float High = 3;
     float Open = 4;
     float Low = 5;
     float New = 6;
     float Volume = 7;
     float Amount = 8;
}

message QuoteDynaSingle // ->MSG
{
     string Obj = 1;
     GeGuDongTai Data = 2;
}

message QuoteDynaOutput
{
    repeated QuoteDynaSingle Results = 1;
}

// K线

message QuoteKline
{
     int32 Time = 1;
     float High = 2;
     float Open = 3;
     float Low = 4;
     float Close = 5;
     float Volume = 6;
     float Amount = 7;
     int32 TickCount = 8;      // 成交笔数
     int32 Advance = 9;        // 上涨家数
     int32 Decline = 10;       // 下跌家数
}

message QuoteKlineSingle // ->MSG
{
     string Obj = 1;
    repeated KXian Data = 2;
}

message QuoteKlineOutput
{
    repeated QuoteKlineSingle Results = 1;
}

//分笔
message QuoteTick
{
     int32 Time = 1;
     float Price = 2;
     float Volume = 3;
     float Amount = 4;
     int32 TickCount = 5;
    repeated float BuyPrice = 6;
    repeated float BuyVolume = 7;
    repeated float SellPrice = 8;
    repeated float SellVolume = 9;
     int32 Outter = 10;
}

message QuoteTickSingle // ->MSG
{
     string Obj = 1;
    repeated FenBiChengJiao Data = 2;
     int64 QingPan = 3;
}

message QuoteTickOutput
{
    repeated QuoteTickSingle Results = 1;
}

//分时
message QuoteMin
{
     int32 Time = 1;
     float Price = 2;
     float Volume = 3;
     float Amount = 4;
     int32 TickCount = 5;
    repeated float BuyPrice = 6;
    repeated float BuyVolume = 7;
    repeated float SellPrice = 8;
    repeated float SellVolume = 9;
}

message QuoteMinSingle // ->MSG
{
    message JiaoYiShiJianDuanJieGou 
    {
         int64 KaiShiShiJian = 1;
         int64 JieShuShiJian = 2;
         int64 KaiShiRiQi = 3;
         int64 JieShuRiQi = 4;
    }

     string Obj = 1;
    repeated FenShi Data = 2;
     int64 RiQi = 3;
     int64 ShiQu = 4;
     int64 JiHeJingJiaDianShu = 5;
    repeated JiaoYiShiJianDuanJieGou JiaoYiShiJianDuan = 6;
     int64 ZuoShou = 7;
     int64 QingPan = 8;
     int64 ZuoRiJieSuanJia = 9;
    repeated FenShiLishi LiShiFenShi = 10;
}

message QuoteMinOutput
{
    repeated QuoteMinSingle Results = 1;
}

// Level大单
message QuoteBOrder
{
     int64  ShiJian              = 1; //时间
     int64  WeiTuoMaiRu          = 2; // 委托单买入数量
     int64  WeiTuoMaiChu         = 3; // 委托单卖出数量
     int64  MaiRuZhongDanBiLi    = 4; // 买入中单比例，1/1000
     int64  MaiRuDaDanBiLi       = 5; // 买入大单比例，1/1000
     int64  MaiRuTeDaDanBiLi     = 6; // 买入特大单比例，1/1000
     int64  MaiChuZhongDanBiLi   = 7; // 卖出中单比例，1/1000
     int64  MaiChuDaDanBiLi      = 8; // 卖出大单比例，1/1000
     int64  MaiChuTeDaDanBiLi    = 9; // 卖出特大单比例，1/1000
     int64  DuanXianMaiRu        = 10; // 短线精灵买入大单统计
     int64  DuanXianMaiChu       = 11; // 短线精灵卖出大单统计
     int64  DuanXianChiHuo       = 12; // 短线精灵吃货大单统计
     int64  DuanXianTuHuo        = 13; // 短线精灵吐货大单统计
     int64  DaDanLiuRuJinE       = 14; // 大单流入金额
     int64  DaDanLiuChuJinE      = 15; // 大单流出金额
     int64  DaDanJingLiuRuJinE   = 16; // 大单净流入金额
}

message QuoteBOrderSingle // ->MSG
{
     string Obj = 1;
    repeated QuoteBOrder Data = 2;
}

message QuoteBOrderOutput
{
    repeated QuoteBOrderSingle Results = 1;
}

// 除权参数
message QuoteDivid
{
     int64  ShiJian              = 1; //时间
     int64  ChuQuanChengShu          = 2; // 除权乘数
     int64  ChuQuanPianYi         = 3; // 除权偏移
}

message QuoteDividSingle // ->MSG
{
     string Obj = 1;
    repeated QuoteDivid Data = 2;
}

message QuoteDividOutput
{
    repeated QuoteDividSingle Results = 1;
}

// 个股动态分时
message QuoteDynaMinSingle // ->MSG
{
     string Obj = 1;
    repeated GeGuDongTai Data = 2;
     int64 QingPan = 3;
}

// 逐笔
message QuoteReportSingle // ->MSG
{
     string Obj = 1;
    repeated ZhubiDangri Data = 2;
     int64 QingPan = 3;
}

// 委托队列
message QuoteQueueSingle // ->MSG
{
     string Obj = 1;
    repeated WeiTuoDuiLie Data = 2;
}

// 历史分时
message QuoteHistoryMinSingle // ->MSG
{
     string Obj = 1;
    repeated FenShiLishi Data = 2;
      int64 ZuoShou = 3; 
}

// 资金流向
message QuoteFundFlow
{
     int64  ShiJian              = 1; //时间
     int64  DaDanLiuRuJinE       = 2; // 大单流入金额
     int64  DaDanLiuChuJinE      = 3; // 大单流出金额
     int64  DaDanJingLiuRuJinE   = 4; // 大单净流入金额
}

message QuoteFundFlowSingle // ->MSG
{
     string Obj = 1;
    repeated QuoteFundFlow Data = 2;
}

// 分时委托队列
message QuoteQueueMinSingle // ->MSG
{
     string Obj = 1;
    repeated WeiTuoDuiLie Data = 2;
     int64 QingPan = 3;
}
