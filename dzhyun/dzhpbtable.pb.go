// Code generated by protoc-gen-go.
// source: dzhpbtable.proto
// DO NOT EDIT!

package dzhyun

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InfoType int32

const (
	InfoType_Type_Unknow      InfoType = 0
	InfoType_Type_Int         InfoType = 105
	InfoType_Type_SInt        InfoType = 120
	InfoType_Type_Float       InfoType = 102
	InfoType_Type_Double      InfoType = 100
	InfoType_Type_String      InfoType = 115
	InfoType_Type_Binary      InfoType = 98
	InfoType_Type_Table       InfoType = 116
	InfoType_Type_Array       InfoType = 128
	InfoType_Type_ArrayInt    InfoType = 233
	InfoType_Type_ArraySInt   InfoType = 248
	InfoType_Type_ArrayFloat  InfoType = 230
	InfoType_Type_ArrayDouble InfoType = 228
	InfoType_Type_ArrayString InfoType = 243
)

var InfoType_name = map[int32]string{
	0:   "Type_Unknow",
	105: "Type_Int",
	120: "Type_SInt",
	102: "Type_Float",
	100: "Type_Double",
	115: "Type_String",
	98:  "Type_Binary",
	116: "Type_Table",
	128: "Type_Array",
	233: "Type_ArrayInt",
	248: "Type_ArraySInt",
	230: "Type_ArrayFloat",
	228: "Type_ArrayDouble",
	243: "Type_ArrayString",
}
var InfoType_value = map[string]int32{
	"Type_Unknow":      0,
	"Type_Int":         105,
	"Type_SInt":        120,
	"Type_Float":       102,
	"Type_Double":      100,
	"Type_String":      115,
	"Type_Binary":      98,
	"Type_Table":       116,
	"Type_Array":       128,
	"Type_ArrayInt":    233,
	"Type_ArraySInt":   248,
	"Type_ArrayFloat":  230,
	"Type_ArrayDouble": 228,
	"Type_ArrayString": 243,
}

func (x InfoType) String() string {
	return proto.EnumName(InfoType_name, int32(x))
}
func (InfoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// pb table
type CInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Ratio int32  `protobuf:"varint,3,opt,name=Ratio" json:"Ratio,omitempty"`
}

func (m *CInfo) Reset()                    { *m = CInfo{} }
func (m *CInfo) String() string            { return proto.CompactTextString(m) }
func (*CInfo) ProtoMessage()               {}
func (*CInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CInfo) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type CArray struct {
	IValues []int64   `protobuf:"varint,1,rep,packed,name=iValues" json:"iValues,omitempty"`
	FValues []float32 `protobuf:"fixed32,2,rep,packed,name=fValues" json:"fValues,omitempty"`
	DValues []float64 `protobuf:"fixed64,3,rep,packed,name=dValues" json:"dValues,omitempty"`
	SValues []string  `protobuf:"bytes,4,rep,name=sValues" json:"sValues,omitempty"`
}

func (m *CArray) Reset()                    { *m = CArray{} }
func (m *CArray) String() string            { return proto.CompactTextString(m) }
func (*CArray) ProtoMessage()               {}
func (*CArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CArray) GetIValues() []int64 {
	if m != nil {
		return m.IValues
	}
	return nil
}

func (m *CArray) GetFValues() []float32 {
	if m != nil {
		return m.FValues
	}
	return nil
}

func (m *CArray) GetDValues() []float64 {
	if m != nil {
		return m.DValues
	}
	return nil
}

func (m *CArray) GetSValues() []string {
	if m != nil {
		return m.SValues
	}
	return nil
}

type CData struct {
	Index   int32     `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	IValues []int64   `protobuf:"varint,2,rep,packed,name=iValues" json:"iValues,omitempty"`
	FValues []float32 `protobuf:"fixed32,3,rep,packed,name=fValues" json:"fValues,omitempty"`
	DValues []float64 `protobuf:"fixed64,4,rep,packed,name=dValues" json:"dValues,omitempty"`
	SValues []string  `protobuf:"bytes,5,rep,name=sValues" json:"sValues,omitempty"`
	BValues [][]byte  `protobuf:"bytes,6,rep,name=bValues,proto3" json:"bValues,omitempty"`
	TValues []*Table  `protobuf:"bytes,7,rep,name=tValues" json:"tValues,omitempty"`
	AValues []*CArray `protobuf:"bytes,8,rep,name=aValues" json:"aValues,omitempty"`
	XValues []int64   `protobuf:"zigzag64,9,rep,packed,name=xValues" json:"xValues,omitempty"`
}

func (m *CData) Reset()                    { *m = CData{} }
func (m *CData) String() string            { return proto.CompactTextString(m) }
func (*CData) ProtoMessage()               {}
func (*CData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CData) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CData) GetIValues() []int64 {
	if m != nil {
		return m.IValues
	}
	return nil
}

func (m *CData) GetFValues() []float32 {
	if m != nil {
		return m.FValues
	}
	return nil
}

func (m *CData) GetDValues() []float64 {
	if m != nil {
		return m.DValues
	}
	return nil
}

func (m *CData) GetSValues() []string {
	if m != nil {
		return m.SValues
	}
	return nil
}

func (m *CData) GetBValues() [][]byte {
	if m != nil {
		return m.BValues
	}
	return nil
}

func (m *CData) GetTValues() []*Table {
	if m != nil {
		return m.TValues
	}
	return nil
}

func (m *CData) GetAValues() []*CArray {
	if m != nil {
		return m.AValues
	}
	return nil
}

func (m *CData) GetXValues() []int64 {
	if m != nil {
		return m.XValues
	}
	return nil
}

type CDataX struct {
	Index   int32   `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	IValue  int64   `protobuf:"varint,2,opt,name=iValue" json:"iValue,omitempty"`
	FValue  float32 `protobuf:"fixed32,3,opt,name=fValue" json:"fValue,omitempty"`
	DValue  float64 `protobuf:"fixed64,4,opt,name=dValue" json:"dValue,omitempty"`
	SValue  string  `protobuf:"bytes,5,opt,name=sValue" json:"sValue,omitempty"`
	BValues []byte  `protobuf:"bytes,6,opt,name=bValues,proto3" json:"bValues,omitempty"`
	TValue  *Table  `protobuf:"bytes,7,opt,name=tValue" json:"tValue,omitempty"`
	AValues *CArray `protobuf:"bytes,8,opt,name=aValues" json:"aValues,omitempty"`
}

func (m *CDataX) Reset()                    { *m = CDataX{} }
func (m *CDataX) String() string            { return proto.CompactTextString(m) }
func (*CDataX) ProtoMessage()               {}
func (*CDataX) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CDataX) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CDataX) GetIValue() int64 {
	if m != nil {
		return m.IValue
	}
	return 0
}

func (m *CDataX) GetFValue() float32 {
	if m != nil {
		return m.FValue
	}
	return 0
}

func (m *CDataX) GetDValue() float64 {
	if m != nil {
		return m.DValue
	}
	return 0
}

func (m *CDataX) GetSValue() string {
	if m != nil {
		return m.SValue
	}
	return ""
}

func (m *CDataX) GetBValues() []byte {
	if m != nil {
		return m.BValues
	}
	return nil
}

func (m *CDataX) GetTValue() *Table {
	if m != nil {
		return m.TValue
	}
	return nil
}

func (m *CDataX) GetAValues() *CArray {
	if m != nil {
		return m.AValues
	}
	return nil
}

type Table struct {
	Tiid  int32     `protobuf:"varint,1,opt,name=Tiid" json:"Tiid,omitempty"`
	Info  []*CInfo  `protobuf:"bytes,2,rep,name=Info" json:"Info,omitempty"`
	Data  []*CData  `protobuf:"bytes,3,rep,name=Data" json:"Data,omitempty"`
	DataX []*CDataX `protobuf:"bytes,4,rep,name=DataX" json:"DataX,omitempty"`
	Name  string    `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	Memo  string    `protobuf:"bytes,6,opt,name=Memo" json:"Memo,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Table) GetTiid() int32 {
	if m != nil {
		return m.Tiid
	}
	return 0
}

func (m *Table) GetInfo() []*CInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Table) GetData() []*CData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Table) GetDataX() []*CDataX {
	if m != nil {
		return m.DataX
	}
	return nil
}

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func init() {
	proto.RegisterType((*CInfo)(nil), "dzhyun.CInfo")
	proto.RegisterType((*CArray)(nil), "dzhyun.CArray")
	proto.RegisterType((*CData)(nil), "dzhyun.CData")
	proto.RegisterType((*CDataX)(nil), "dzhyun.CDataX")
	proto.RegisterType((*Table)(nil), "dzhyun.Table")
	proto.RegisterEnum("dzhyun.InfoType", InfoType_name, InfoType_value)
}

func init() { proto.RegisterFile("dzhpbtable.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0xc5, 0x71, 0x93, 0xb4, 0xb3, 0xdb, 0xd6, 0x1a, 0x16, 0x94, 0x03, 0x07, 0x53, 0x81, 0xb0,
	0x38, 0xf4, 0x00, 0x5f, 0x40, 0xbb, 0x20, 0xf5, 0x00, 0x07, 0xef, 0x82, 0xb8, 0xa1, 0x84, 0xa4,
	0x6c, 0x44, 0x9b, 0x54, 0x6d, 0x2a, 0xda, 0x15, 0x07, 0xae, 0xfc, 0x03, 0xff, 0xc0, 0x4f, 0x21,
	0xa4, 0x3d, 0x73, 0xe1, 0x88, 0x3c, 0x76, 0xda, 0x14, 0x44, 0x4f, 0xf1, 0x7b, 0x6f, 0x5c, 0x3f,
	0x3f, 0xcf, 0x14, 0x44, 0x7a, 0x7d, 0xb5, 0x48, 0xaa, 0x38, 0x99, 0x65, 0xc3, 0xc5, 0xb2, 0xac,
	0x4a, 0x0c, 0xd2, 0xeb, 0xab, 0xed, 0xba, 0x18, 0x3c, 0x07, 0x7f, 0x3c, 0x29, 0xa6, 0x25, 0x22,
	0xb4, 0x5e, 0xc5, 0xf3, 0x2c, 0x62, 0x92, 0xa9, 0x8e, 0xa6, 0xb5, 0xe1, 0x2e, 0xb7, 0x8b, 0x2c,
	0xf2, 0x24, 0x53, 0xbe, 0xa6, 0x35, 0x9e, 0x81, 0xaf, 0xe3, 0x2a, 0x2f, 0x23, 0x4e, 0xa4, 0x05,
	0x83, 0xcf, 0x10, 0x8c, 0x9f, 0x2d, 0x97, 0xf1, 0x16, 0xef, 0x41, 0x98, 0xbf, 0x89, 0x67, 0xeb,
	0x6c, 0x15, 0x31, 0xc9, 0x15, 0x1f, 0x79, 0x82, 0xe9, 0x9a, 0x32, 0xea, 0xd4, 0xa9, 0x9e, 0xe4,
	0xca, 0xb3, 0xea, 0x74, 0xaf, 0xa6, 0x4e, 0xe5, 0x92, 0x2b, 0x66, 0x55, 0x47, 0x61, 0x04, 0xe1,
	0xca, 0xa9, 0x2d, 0xc9, 0x55, 0x47, 0xd7, 0x70, 0xf0, 0xcd, 0x03, 0x7f, 0x7c, 0x1e, 0x57, 0xb1,
	0x71, 0x37, 0x29, 0xd2, 0x6c, 0x43, 0xd7, 0xf0, 0xb5, 0x05, 0x4d, 0x4f, 0xde, 0x51, 0x4f, 0xfc,
	0xa8, 0xa7, 0xd6, 0x51, 0x4f, 0xfe, 0x81, 0x27, 0xa3, 0x24, 0x4e, 0x09, 0x24, 0x57, 0xa7, 0xba,
	0x86, 0xf8, 0x08, 0xc2, 0xca, 0x29, 0xa1, 0xe4, 0xea, 0xe4, 0x49, 0x77, 0x68, 0x1f, 0x63, 0x78,
	0x69, 0x1e, 0x48, 0xd7, 0x2a, 0x2a, 0x08, 0x63, 0x57, 0xd8, 0xa6, 0xc2, 0x5e, 0x5d, 0x68, 0xb3,
	0xd6, 0xb5, 0x6c, 0x4c, 0x6e, 0x5c, 0x65, 0x47, 0x72, 0x85, 0xd6, 0xa4, 0xa3, 0x06, 0x37, 0x0c,
	0x02, 0x8a, 0xe7, 0xed, 0x7f, 0xf2, 0xb9, 0x0b, 0x81, 0x0d, 0x83, 0x5e, 0x9a, 0x6b, 0x87, 0x0c,
	0x6f, 0x63, 0xa0, 0xc7, 0xf6, 0xb4, 0x43, 0x86, 0xb7, 0x01, 0x44, 0x2d, 0xc9, 0x14, 0xd3, 0x0e,
	0x19, 0xde, 0x5e, 0x3f, 0xf2, 0xa9, 0x8b, 0x1c, 0x3a, 0xcc, 0x82, 0x35, 0xb3, 0x78, 0x08, 0x81,
	0xbd, 0x6d, 0x14, 0x4a, 0xf6, 0x6f, 0x14, 0x4e, 0x3c, 0x4c, 0x82, 0x1d, 0x49, 0x62, 0xf0, 0x9d,
	0x81, 0x4f, 0x7b, 0xa9, 0x79, 0xf3, 0x3c, 0x75, 0x37, 0xa5, 0x35, 0xde, 0x87, 0x96, 0x69, 0x76,
	0xea, 0x82, 0xc6, 0x61, 0x34, 0x01, 0x9a, 0x24, 0x53, 0x62, 0xa2, 0xa2, 0x56, 0x68, 0x96, 0x18,
	0x52, 0x93, 0x84, 0x0f, 0xc0, 0xa7, 0x34, 0xa9, 0x21, 0x9a, 0x5e, 0x88, 0xd5, 0x56, 0xdc, 0x0d,
	0x94, 0x7f, 0x38, 0x50, 0x2f, 0xb3, 0x79, 0x49, 0x29, 0x74, 0x34, 0xad, 0x1f, 0x7f, 0xf5, 0xa0,
	0x6d, 0x4e, 0xa6, 0xe9, 0xea, 0xc3, 0x89, 0xf9, 0xbe, 0x7b, 0x5d, 0x7c, 0x2c, 0xca, 0x4f, 0xe2,
	0x16, 0x9e, 0x42, 0x9b, 0x88, 0x49, 0x51, 0x89, 0x1c, 0xbb, 0xd0, 0x21, 0x74, 0x61, 0xe0, 0x06,
	0x7b, 0x00, 0x04, 0x5f, 0xcc, 0xca, 0xb8, 0x12, 0xd3, 0xdd, 0xee, 0xf3, 0x72, 0x9d, 0xcc, 0x32,
	0x91, 0xee, 0x88, 0x8b, 0x6a, 0x99, 0x17, 0x1f, 0xc4, 0x6a, 0x47, 0x8c, 0xf2, 0x22, 0x5e, 0x6e,
	0x45, 0xb2, 0xfb, 0x09, 0xca, 0x4c, 0x54, 0xd8, 0x77, 0x98, 0x62, 0x15, 0x5f, 0x18, 0x22, 0x74,
	0xf7, 0x84, 0x39, 0xf6, 0x86, 0xe1, 0x6d, 0xe8, 0xed, 0x39, 0xf2, 0xf2, 0x9b, 0xe1, 0x19, 0xf4,
	0xf7, 0xa4, 0x75, 0xf4, 0x93, 0xe1, 0x1d, 0x10, 0x7b, 0xd6, 0xf9, 0xfa, 0xf1, 0x17, 0xed, 0xdc,
	0xfd, 0x62, 0x23, 0x04, 0xf1, 0xbe, 0x9c, 0xd7, 0x79, 0xd2, 0x3f, 0x55, 0x12, 0xd0, 0xe7, 0xe9,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xfa, 0xb9, 0xfe, 0xc4, 0x04, 0x00, 0x00,
}
