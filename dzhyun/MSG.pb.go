// Code generated by protoc-gen-go.
// source: MSG.proto
// DO NOT EDIT!

/*
Package dzhyun is a generated protocol buffer package.

It is generated from these files:
	MSG.proto
	dzhoutput.proto
	dzhpbtable.proto
	dzhua.proto
	dzhyun.blockstatistics.proto
	dzhyun.dxspirit.proto
	dzhyun.gupiaolianxu.proto
	dzhyun.gupiaoqiepian.proto
	dzhyun.historytrends.proto
	dzhyun.jianpanbao.proto
	dzhyun.paixu.proto
	dzhyun.stkdata.proto
	dzhyun.topicinvest.proto
	dzhyun.zhibiao.proto
	dzhyun.zhibiaojisuan.proto
	dzhyun.zhubi.proto

It has these top-level messages:
	MSG
	QuoteDyna
	QuoteDynaSingle
	QuoteDynaOutput
	QuoteKline
	QuoteKlineSingle
	QuoteKlineOutput
	QuoteTick
	QuoteTickSingle
	QuoteTickOutput
	QuoteMin
	QuoteMinSingle
	QuoteMinOutput
	QuoteBOrder
	QuoteBOrderSingle
	QuoteBOrderOutput
	QuoteDivid
	QuoteDividSingle
	QuoteDividOutput
	QuoteDynaMinSingle
	QuoteReportSingle
	QuoteQueueSingle
	QuoteHistoryMinSingle
	QuoteFundFlow
	QuoteFundFlowSingle
	QuoteQueueMinSingle
	CInfo
	CArray
	CData
	CDataX
	Table
	UAResponse
	ChildResponse
	GroupResponse
	TongJiApp
	DXSpirit
	DXSpiritStat
	KXian
	FenShi
	FenShiLishi
	DynaAlib
	DynaAlibObj
	BackUpState
	LingxianDuokongZhibiao
	LingxianDuokongZhibiaoStatus
	FenBiChengJiao
	GeGuDongTai
	MaiMaiPan
	KuoZhanMaiMaiPan
	QuanMaiMaiPan
	WeiTuoDuiLie
	Level2TongJi
	DynaMMP
	DynaMaiMaiPrice
	DynaMaiMaiZongLiang
	DynaFenshiStatus
	YueKXianShuJu
	YueZouShiShuJu
	HistoryTrends
	MonthTrends
	JPBShuJu
	JPBShuChu
	JianPanBaoShuChu
	PaiXu
	PaiMing
	StkData
	LingZhangGuShuJu
	TopicInvestRank
	TopicInvest
	LiShiHangQing
	LiShiZouShi
	TopicInvestHistory
	TopicInvestInfo
	ZhiBiao
	ZhiBiaoShuChu
	ZhiBiaoShuXingShuChu
	ZhiBiaoHuiTuShuChu
	ZhubiDangri
*/
package dzhyun

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumID int32

const (
	EnumID_IDNone                  EnumID = 0
	EnumID_IDId                    EnumID = 1
	EnumID_IDObj                   EnumID = 2
	EnumID_IDTbl                   EnumID = 3
	EnumID_IDObjCount              EnumID = 5
	EnumID_IDQuoteDynaSingle       EnumID = 20
	EnumID_IDQuoteKlineSingle      EnumID = 21
	EnumID_IDQuoteTickSingle       EnumID = 22
	EnumID_IDQuoteMinSingle        EnumID = 23
	EnumID_IDZhiBiao               EnumID = 26
	EnumID_IDStkData               EnumID = 27
	EnumID_IDPaiXu                 EnumID = 28
	EnumID_IDJianPanBaoShuChu      EnumID = 29
	EnumID_IDTongJiApp             EnumID = 73
	EnumID_IDQuoteBOrderSingle     EnumID = 76
	EnumID_IDDXSpirit              EnumID = 77
	EnumID_IDDXSpiritStat          EnumID = 113
	EnumID_IDPaiMing               EnumID = 115
	EnumID_IDQuoteDividSingle      EnumID = 170
	EnumID_IDHistoryTrends         EnumID = 215
	EnumID_IDQuoteDynaMinSingle    EnumID = 218
	EnumID_IDQuoteReportSingle     EnumID = 219
	EnumID_IDQuoteQueueSingle      EnumID = 220
	EnumID_IDQuoteHistoryMinSingle EnumID = 221
	EnumID_IDQuoteFundFlowSingle   EnumID = 265
	EnumID_IDMonthTrends           EnumID = 266
	EnumID_IDQuoteQueueMinSingle   EnumID = 269
)

var EnumID_name = map[int32]string{
	0:   "IDNone",
	1:   "IDId",
	2:   "IDObj",
	3:   "IDTbl",
	5:   "IDObjCount",
	20:  "IDQuoteDynaSingle",
	21:  "IDQuoteKlineSingle",
	22:  "IDQuoteTickSingle",
	23:  "IDQuoteMinSingle",
	26:  "IDZhiBiao",
	27:  "IDStkData",
	28:  "IDPaiXu",
	29:  "IDJianPanBaoShuChu",
	73:  "IDTongJiApp",
	76:  "IDQuoteBOrderSingle",
	77:  "IDDXSpirit",
	113: "IDDXSpiritStat",
	115: "IDPaiMing",
	170: "IDQuoteDividSingle",
	215: "IDHistoryTrends",
	218: "IDQuoteDynaMinSingle",
	219: "IDQuoteReportSingle",
	220: "IDQuoteQueueSingle",
	221: "IDQuoteHistoryMinSingle",
	265: "IDQuoteFundFlowSingle",
	266: "IDMonthTrends",
	269: "IDQuoteQueueMinSingle",
}
var EnumID_value = map[string]int32{
	"IDNone":                  0,
	"IDId":                    1,
	"IDObj":                   2,
	"IDTbl":                   3,
	"IDObjCount":              5,
	"IDQuoteDynaSingle":       20,
	"IDQuoteKlineSingle":      21,
	"IDQuoteTickSingle":       22,
	"IDQuoteMinSingle":        23,
	"IDZhiBiao":               26,
	"IDStkData":               27,
	"IDPaiXu":                 28,
	"IDJianPanBaoShuChu":      29,
	"IDTongJiApp":             73,
	"IDQuoteBOrderSingle":     76,
	"IDDXSpirit":              77,
	"IDDXSpiritStat":          113,
	"IDPaiMing":               115,
	"IDQuoteDividSingle":      170,
	"IDHistoryTrends":         215,
	"IDQuoteDynaMinSingle":    218,
	"IDQuoteReportSingle":     219,
	"IDQuoteQueueSingle":      220,
	"IDQuoteHistoryMinSingle": 221,
	"IDQuoteFundFlowSingle":   265,
	"IDMonthTrends":           266,
	"IDQuoteQueueMinSingle":   269,
}

func (x EnumID) String() string {
	return proto.EnumName(EnumID_name, int32(x))
}
func (EnumID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MSG struct {
	Id                           int32                    `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Obj                          string                   `protobuf:"bytes,2,opt,name=Obj" json:"Obj,omitempty"`
	Tbl                          *Table                   `protobuf:"bytes,3,opt,name=Tbl" json:"Tbl,omitempty"`
	ObjCount                     int32                    `protobuf:"varint,5,opt,name=ObjCount" json:"ObjCount,omitempty"`
	RepDataQuoteDynaSingle       []*QuoteDynaSingle       `protobuf:"bytes,20,rep,name=RepDataQuoteDynaSingle" json:"RepDataQuoteDynaSingle,omitempty"`
	RepDataQuoteKlineSingle      []*QuoteKlineSingle      `protobuf:"bytes,21,rep,name=RepDataQuoteKlineSingle" json:"RepDataQuoteKlineSingle,omitempty"`
	RepDataQuoteTickSingle       []*QuoteTickSingle       `protobuf:"bytes,22,rep,name=RepDataQuoteTickSingle" json:"RepDataQuoteTickSingle,omitempty"`
	RepDataQuoteMinSingle        []*QuoteMinSingle        `protobuf:"bytes,23,rep,name=RepDataQuoteMinSingle" json:"RepDataQuoteMinSingle,omitempty"`
	RepDataZhiBiao               []*ZhiBiao               `protobuf:"bytes,26,rep,name=RepDataZhiBiao" json:"RepDataZhiBiao,omitempty"`
	RepDataStkData               []*StkData               `protobuf:"bytes,27,rep,name=RepDataStkData" json:"RepDataStkData,omitempty"`
	RepDataPaiXu                 []*PaiXu                 `protobuf:"bytes,28,rep,name=RepDataPaiXu" json:"RepDataPaiXu,omitempty"`
	RepDataJianPanBaoShuChu      []*JianPanBaoShuChu      `protobuf:"bytes,29,rep,name=RepDataJianPanBaoShuChu" json:"RepDataJianPanBaoShuChu,omitempty"`
	RepDataTongJiApp             []*TongJiApp             `protobuf:"bytes,73,rep,name=RepDataTongJiApp" json:"RepDataTongJiApp,omitempty"`
	RepDataQuoteBOrderSingle     []*QuoteBOrderSingle     `protobuf:"bytes,76,rep,name=RepDataQuoteBOrderSingle" json:"RepDataQuoteBOrderSingle,omitempty"`
	RepDataDXSpirit              []*DXSpirit              `protobuf:"bytes,77,rep,name=RepDataDXSpirit" json:"RepDataDXSpirit,omitempty"`
	RepDataDXSpiritStat          []*DXSpiritStat          `protobuf:"bytes,113,rep,name=RepDataDXSpiritStat" json:"RepDataDXSpiritStat,omitempty"`
	RepDataPaiMing               []*PaiMing               `protobuf:"bytes,115,rep,name=RepDataPaiMing" json:"RepDataPaiMing,omitempty"`
	RepDataQuoteDividSingle      []*QuoteDividSingle      `protobuf:"bytes,170,rep,name=RepDataQuoteDividSingle" json:"RepDataQuoteDividSingle,omitempty"`
	RepDataHistoryTrends         []*HistoryTrends         `protobuf:"bytes,215,rep,name=RepDataHistoryTrends" json:"RepDataHistoryTrends,omitempty"`
	RepDataQuoteDynaMinSingle    []*QuoteDynaMinSingle    `protobuf:"bytes,218,rep,name=RepDataQuoteDynaMinSingle" json:"RepDataQuoteDynaMinSingle,omitempty"`
	RepDataQuoteReportSingle     []*QuoteReportSingle     `protobuf:"bytes,219,rep,name=RepDataQuoteReportSingle" json:"RepDataQuoteReportSingle,omitempty"`
	RepDataQuoteQueueSingle      []*QuoteQueueSingle      `protobuf:"bytes,220,rep,name=RepDataQuoteQueueSingle" json:"RepDataQuoteQueueSingle,omitempty"`
	RepDataQuoteHistoryMinSingle []*QuoteHistoryMinSingle `protobuf:"bytes,221,rep,name=RepDataQuoteHistoryMinSingle" json:"RepDataQuoteHistoryMinSingle,omitempty"`
	RepDataQuoteFundFlowSingle   []*QuoteFundFlowSingle   `protobuf:"bytes,265,rep,name=RepDataQuoteFundFlowSingle" json:"RepDataQuoteFundFlowSingle,omitempty"`
	RepDataMonthTrends           []*MonthTrends           `protobuf:"bytes,266,rep,name=RepDataMonthTrends" json:"RepDataMonthTrends,omitempty"`
	RepDataQuoteQueueMinSingle   []*QuoteQueueMinSingle   `protobuf:"bytes,269,rep,name=RepDataQuoteQueueMinSingle" json:"RepDataQuoteQueueMinSingle,omitempty"`
}

func (m *MSG) Reset()                    { *m = MSG{} }
func (m *MSG) String() string            { return proto.CompactTextString(m) }
func (*MSG) ProtoMessage()               {}
func (*MSG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MSG) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MSG) GetObj() string {
	if m != nil {
		return m.Obj
	}
	return ""
}

func (m *MSG) GetTbl() *Table {
	if m != nil {
		return m.Tbl
	}
	return nil
}

func (m *MSG) GetObjCount() int32 {
	if m != nil {
		return m.ObjCount
	}
	return 0
}

func (m *MSG) GetRepDataQuoteDynaSingle() []*QuoteDynaSingle {
	if m != nil {
		return m.RepDataQuoteDynaSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteKlineSingle() []*QuoteKlineSingle {
	if m != nil {
		return m.RepDataQuoteKlineSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteTickSingle() []*QuoteTickSingle {
	if m != nil {
		return m.RepDataQuoteTickSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteMinSingle() []*QuoteMinSingle {
	if m != nil {
		return m.RepDataQuoteMinSingle
	}
	return nil
}

func (m *MSG) GetRepDataZhiBiao() []*ZhiBiao {
	if m != nil {
		return m.RepDataZhiBiao
	}
	return nil
}

func (m *MSG) GetRepDataStkData() []*StkData {
	if m != nil {
		return m.RepDataStkData
	}
	return nil
}

func (m *MSG) GetRepDataPaiXu() []*PaiXu {
	if m != nil {
		return m.RepDataPaiXu
	}
	return nil
}

func (m *MSG) GetRepDataJianPanBaoShuChu() []*JianPanBaoShuChu {
	if m != nil {
		return m.RepDataJianPanBaoShuChu
	}
	return nil
}

func (m *MSG) GetRepDataTongJiApp() []*TongJiApp {
	if m != nil {
		return m.RepDataTongJiApp
	}
	return nil
}

func (m *MSG) GetRepDataQuoteBOrderSingle() []*QuoteBOrderSingle {
	if m != nil {
		return m.RepDataQuoteBOrderSingle
	}
	return nil
}

func (m *MSG) GetRepDataDXSpirit() []*DXSpirit {
	if m != nil {
		return m.RepDataDXSpirit
	}
	return nil
}

func (m *MSG) GetRepDataDXSpiritStat() []*DXSpiritStat {
	if m != nil {
		return m.RepDataDXSpiritStat
	}
	return nil
}

func (m *MSG) GetRepDataPaiMing() []*PaiMing {
	if m != nil {
		return m.RepDataPaiMing
	}
	return nil
}

func (m *MSG) GetRepDataQuoteDividSingle() []*QuoteDividSingle {
	if m != nil {
		return m.RepDataQuoteDividSingle
	}
	return nil
}

func (m *MSG) GetRepDataHistoryTrends() []*HistoryTrends {
	if m != nil {
		return m.RepDataHistoryTrends
	}
	return nil
}

func (m *MSG) GetRepDataQuoteDynaMinSingle() []*QuoteDynaMinSingle {
	if m != nil {
		return m.RepDataQuoteDynaMinSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteReportSingle() []*QuoteReportSingle {
	if m != nil {
		return m.RepDataQuoteReportSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteQueueSingle() []*QuoteQueueSingle {
	if m != nil {
		return m.RepDataQuoteQueueSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteHistoryMinSingle() []*QuoteHistoryMinSingle {
	if m != nil {
		return m.RepDataQuoteHistoryMinSingle
	}
	return nil
}

func (m *MSG) GetRepDataQuoteFundFlowSingle() []*QuoteFundFlowSingle {
	if m != nil {
		return m.RepDataQuoteFundFlowSingle
	}
	return nil
}

func (m *MSG) GetRepDataMonthTrends() []*MonthTrends {
	if m != nil {
		return m.RepDataMonthTrends
	}
	return nil
}

func (m *MSG) GetRepDataQuoteQueueMinSingle() []*QuoteQueueMinSingle {
	if m != nil {
		return m.RepDataQuoteQueueMinSingle
	}
	return nil
}

func init() {
	proto.RegisterType((*MSG)(nil), "dzhyun.MSG")
	proto.RegisterEnum("dzhyun.EnumID", EnumID_name, EnumID_value)
}

func init() { proto.RegisterFile("MSG.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x2e, 0xa5, 0xd8, 0x8d, 0xc7, 0xb5, 0xb5, 0x19, 0xeb, 0x87, 0x96, 0x65, 0xd4, 0xe8, 0xc9,
	0xe8, 0xc1, 0x40, 0xd3, 0x43, 0x81, 0x02, 0x3d, 0xd4, 0x61, 0x9d, 0xd2, 0xb5, 0x2a, 0x67, 0xa5,
	0x16, 0x69, 0xd1, 0xcb, 0xd2, 0x24, 0xac, 0xb5, 0x55, 0x92, 0x91, 0x96, 0x6d, 0xec, 0x6b, 0x4f,
	0x09, 0x90, 0xe7, 0x28, 0x90, 0x17, 0x0a, 0x90, 0x9f, 0x77, 0x09, 0xb4, 0x1c, 0x52, 0x4b, 0x86,
	0xf4, 0xc9, 0xe2, 0xf7, 0xb7, 0xcb, 0xd9, 0x9d, 0xa1, 0x61, 0x63, 0x38, 0x7e, 0x7c, 0x14, 0xcf,
	0x23, 0x15, 0xe1, 0xba, 0x7f, 0x3b, 0xbd, 0x49, 0xc2, 0x3e, 0xf3, 0x6f, 0xa7, 0xb1, 0xa7, 0x84,
	0x37, 0x0b, 0x52, 0xa6, 0xdf, 0x4e, 0x99, 0xa3, 0x85, 0xba, 0xf6, 0x85, 0x12, 0x25, 0xf4, 0x76,
	0x2a, 0x3d, 0x29, 0x22, 0x42, 0x5b, 0xfe, 0xed, 0x34, 0x4a, 0x54, 0x9c, 0x28, 0x02, 0x7a, 0x24,
	0xbb, 0x92, 0x22, 0x8c, 0x45, 0xe8, 0xe5, 0x4a, 0x24, 0x22, 0x16, 0xf2, 0x79, 0x42, 0xd8, 0x80,
	0x30, 0x6f, 0x16, 0x5d, 0x5c, 0x2f, 0x94, 0x50, 0x72, 0xa1, 0xe4, 0xc5, 0x82, 0xd8, 0x0e, 0xb1,
	0xfe, 0xf3, 0x45, 0x2c, 0xe7, 0x32, 0x5b, 0xa1, 0x4f, 0xf0, 0x54, 0x2e, 0x54, 0x34, 0xbf, 0x51,
	0xf3, 0x20, 0xf4, 0xc9, 0xf2, 0xd5, 0x7f, 0xdb, 0xd0, 0x1c, 0x8e, 0x1f, 0xe3, 0x36, 0x34, 0x5c,
	0xdf, 0xb6, 0x0e, 0xac, 0xc3, 0x35, 0xde, 0x70, 0x7d, 0x64, 0xd0, 0x1c, 0x79, 0x57, 0x76, 0xe3,
	0xc0, 0x3a, 0xdc, 0xe0, 0xcb, 0x9f, 0xf8, 0x25, 0x34, 0x27, 0xde, 0xcc, 0x6e, 0x1e, 0x58, 0x87,
	0x9b, 0x0f, 0xb7, 0x8e, 0x28, 0x73, 0xb2, 0x2c, 0x03, 0x5f, 0x32, 0xd8, 0x87, 0xfb, 0x23, 0xef,
	0xea, 0x51, 0x94, 0x84, 0xca, 0x5e, 0xd3, 0x41, 0xf9, 0x33, 0x8e, 0xa0, 0xcb, 0x83, 0xd8, 0x11,
	0x4a, 0x3c, 0x49, 0x22, 0x15, 0x38, 0x37, 0xa1, 0x18, 0xcb, 0xf0, 0x72, 0x16, 0xd8, 0xed, 0x83,
	0xe6, 0xe1, 0xe6, 0xc3, 0x5e, 0x96, 0x57, 0xa2, 0x79, 0x8d, 0x0d, 0x39, 0xf4, 0x4c, 0xe6, 0x97,
	0x99, 0x0c, 0x03, 0x4a, 0xec, 0xe8, 0x44, 0xbb, 0x90, 0x68, 0xf0, 0xbc, 0xce, 0x58, 0xde, 0xe4,
	0x44, 0x5e, 0x5c, 0x53, 0x64, 0xb7, 0x62, 0x93, 0x2b, 0x9a, 0xd7, 0xd8, 0xf0, 0x0c, 0x3a, 0x26,
	0x33, 0x94, 0x21, 0xe5, 0xf5, 0x74, 0x5e, 0xb7, 0x90, 0x97, 0xb3, 0xbc, 0xda, 0x84, 0xdf, 0xc1,
	0x36, 0x11, 0x7f, 0x4e, 0xe5, 0xb1, 0x14, 0x91, 0xdd, 0xd7, 0x31, 0xad, 0x2c, 0x86, 0x60, 0x5e,
	0x92, 0x19, 0xc6, 0xb1, 0xba, 0x5e, 0xfe, 0xb1, 0xf7, 0x8a, 0x46, 0x82, 0x79, 0x49, 0x86, 0xdf,
	0xc0, 0x17, 0x84, 0x9c, 0x0b, 0xf9, 0x34, 0xb1, 0x07, 0xda, 0x96, 0x9f, 0xbd, 0x06, 0x79, 0x41,
	0x62, 0x9c, 0xcb, 0xa9, 0x14, 0xe1, 0xb9, 0x08, 0x8f, 0x45, 0x34, 0x9e, 0x26, 0x8f, 0xa6, 0x89,
	0xbd, 0x5f, 0x3c, 0x97, 0x32, 0xcf, 0xeb, 0x8c, 0xf8, 0x03, 0x30, 0xa2, 0x26, 0x51, 0x78, 0x79,
	0x2a, 0x7f, 0x8c, 0x63, 0xdb, 0xd5, 0x61, 0x0f, 0xf2, 0x6b, 0x98, 0x11, 0xfc, 0x13, 0x29, 0xfe,
	0x06, 0xb6, 0x59, 0xd0, 0xe3, 0xd1, 0xdc, 0x0f, 0xe6, 0x74, 0x10, 0x67, 0x3a, 0x66, 0xb7, 0x70,
	0x10, 0xa6, 0x80, 0xd7, 0x5a, 0xf1, 0x7b, 0x68, 0x11, 0xe7, 0x3c, 0x1d, 0xeb, 0x76, 0xb3, 0x87,
	0x3a, 0x8d, 0x65, 0x69, 0x19, 0xce, 0xcb, 0x42, 0x3c, 0x81, 0x9d, 0x12, 0x34, 0x56, 0x42, 0xd9,
	0xcf, 0xb4, 0xbf, 0x5d, 0xf6, 0x2f, 0x39, 0x5e, 0x65, 0x30, 0x4e, 0xf6, 0x5c, 0xc8, 0xa1, 0x0c,
	0x2f, 0xed, 0x45, 0xf1, 0x64, 0x09, 0xe6, 0x25, 0x19, 0x8e, 0x8b, 0xed, 0xe3, 0xc8, 0x7f, 0xa4,
	0x4f, 0x25, 0x79, 0x6d, 0x55, 0xf4, 0x8f, 0x21, 0xe0, 0x75, 0x4e, 0x3c, 0x85, 0x36, 0x51, 0x3f,
	0xa7, 0x93, 0x66, 0xa2, 0x27, 0x8d, 0xfd, 0x26, 0x4d, 0xec, 0x64, 0x89, 0x05, 0x96, 0x57, 0x7a,
	0xf0, 0x0f, 0xd8, 0x2d, 0x77, 0xfe, 0xaa, 0x7d, 0xde, 0xa6, 0x81, 0xfd, 0x4f, 0x86, 0xc6, 0xaa,
	0x87, 0xea, 0xdd, 0xf8, 0x7b, 0xf1, 0x3e, 0xf0, 0x20, 0x8e, 0xe6, 0x8a, 0x92, 0xdf, 0x59, 0x15,
	0x17, 0xc2, 0x54, 0xf0, 0x5a, 0x6f, 0xb9, 0xa6, 0x4f, 0x92, 0x20, 0xc9, 0x46, 0xd2, 0xfb, 0xaa,
	0x9a, 0x1a, 0x02, 0x5e, 0xe7, 0x44, 0x0f, 0x06, 0x26, 0x45, 0x45, 0x5a, 0x95, 0xe2, 0x43, 0x9a,
	0xbc, 0x5f, 0x48, 0x2e, 0xab, 0xf8, 0x9d, 0x19, 0xf8, 0x17, 0xf4, 0x4d, 0xfe, 0x24, 0x09, 0xfd,
	0x93, 0x59, 0xf4, 0x2f, 0xad, 0xf0, 0xa2, 0xa1, 0x57, 0xd8, 0x2b, 0xac, 0x50, 0xd4, 0xf0, 0x3b,
	0xfc, 0xe8, 0x00, 0x12, 0x3b, 0x8c, 0x42, 0x35, 0xa5, 0x3b, 0xf1, 0x32, 0x4d, 0xdd, 0xc9, 0x52,
	0x0d, 0x8e, 0x57, 0xe8, 0xcb, 0x7b, 0xd4, 0x25, 0x5a, 0x55, 0xe1, 0x55, 0xd5, 0x1e, 0x8b, 0x1a,
	0x7e, 0x87, 0xff, 0xeb, 0xff, 0xef, 0xc1, 0xfa, 0x4f, 0x61, 0xf2, 0xb7, 0xeb, 0x20, 0xc0, 0xba,
	0xeb, 0xfc, 0x1a, 0x85, 0x01, 0xfb, 0x0c, 0xef, 0xc3, 0x3d, 0xd7, 0x71, 0x7d, 0x66, 0xe1, 0x06,
	0xac, 0xb9, 0xce, 0xc8, 0xbb, 0x62, 0x8d, 0xf4, 0xe7, 0xc4, 0x9b, 0xb1, 0x26, 0x6e, 0x03, 0x68,
	0x54, 0x7f, 0xe3, 0xd8, 0x1a, 0x76, 0xe0, 0x81, 0xeb, 0x94, 0xbe, 0x54, 0xac, 0x8d, 0x5d, 0x40,
	0x82, 0x8d, 0xaf, 0x0d, 0xeb, 0x18, 0xf2, 0xd5, 0x37, 0x83, 0x75, 0xb1, 0x0d, 0x8c, 0xe0, 0x7c,
	0x83, 0xac, 0x87, 0x5b, 0xb0, 0xe1, 0x3a, 0x34, 0xd1, 0x59, 0x3f, 0x7d, 0xa4, 0x39, 0xcd, 0xf6,
	0x70, 0x13, 0x3e, 0x77, 0x1d, 0x3d, 0x81, 0xd9, 0x20, 0x5d, 0xaf, 0x3c, 0x45, 0xd9, 0x3e, 0xb6,
	0x60, 0xd3, 0x75, 0xf2, 0xb9, 0xc8, 0x5c, 0xec, 0xc1, 0x0e, 0xad, 0x64, 0x4e, 0x36, 0x76, 0x96,
	0xbe, 0x58, 0x36, 0x69, 0xd8, 0x10, 0x11, 0xb6, 0x57, 0xcf, 0xcb, 0xc9, 0xc3, 0x9e, 0xa5, 0x3b,
	0xa0, 0x79, 0xc2, 0x16, 0xd8, 0xcb, 0x5f, 0xd2, 0x18, 0x09, 0xec, 0xb5, 0x85, 0x6d, 0x68, 0xb9,
	0x4e, 0xa1, 0xb9, 0xd9, 0x1b, 0x0b, 0x77, 0xa1, 0x6d, 0x94, 0x6a, 0xf5, 0xa2, 0x6f, 0x2d, 0xb4,
	0xf3, 0x5d, 0x99, 0xed, 0xc5, 0xde, 0x59, 0xc6, 0x1a, 0x46, 0x8b, 0xb0, 0xf7, 0x16, 0x0e, 0xa0,
	0x47, 0x44, 0xf9, 0x72, 0xb3, 0x0f, 0x16, 0xf6, 0xa1, 0x43, 0x6c, 0xf1, 0x6a, 0xb2, 0x17, 0x0d,
	0x44, 0xd8, 0x72, 0x1d, 0xe3, 0xa2, 0xb1, 0x97, 0x0d, 0x43, 0x5f, 0xbc, 0x26, 0xec, 0x55, 0xc3,
	0x5b, 0xd7, 0xff, 0x36, 0x7d, 0xfb, 0x31, 0x00, 0x00, 0xff, 0xff, 0x27, 0xd0, 0xad, 0xcc, 0x18,
	0x0a, 0x00, 0x00,
}
